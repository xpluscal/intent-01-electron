{"version":3,"file":"index.js","sources":["../../electron/main/update.ts","../../electron/main/index.ts"],"sourcesContent":["import { app, ipcMain } from 'electron'\nimport { createRequire } from 'node:module'\nimport type {\n  ProgressInfo,\n  UpdateDownloadedEvent,\n  UpdateInfo,\n} from 'electron-updater'\n\nconst { autoUpdater } = createRequire(import.meta.url)('electron-updater');\n\nexport function update(win: Electron.BrowserWindow) {\n\n  // When set to false, the update download will be triggered through the API\n  autoUpdater.autoDownload = false\n  autoUpdater.disableWebInstaller = false\n  autoUpdater.allowDowngrade = false\n\n  // start check\n  autoUpdater.on('checking-for-update', function () { })\n  // update available\n  autoUpdater.on('update-available', (arg: UpdateInfo) => {\n    win.webContents.send('update-can-available', { update: true, version: app.getVersion(), newVersion: arg?.version })\n  })\n  // update not available\n  autoUpdater.on('update-not-available', (arg: UpdateInfo) => {\n    win.webContents.send('update-can-available', { update: false, version: app.getVersion(), newVersion: arg?.version })\n  })\n\n  // Checking for updates\n  ipcMain.handle('check-update', async () => {\n    if (!app.isPackaged) {\n      const error = new Error('The update feature is only available after the package.')\n      return { message: error.message, error }\n    }\n\n    try {\n      return await autoUpdater.checkForUpdatesAndNotify()\n    } catch (error) {\n      return { message: 'Network error', error }\n    }\n  })\n\n  // Start downloading and feedback on progress\n  ipcMain.handle('start-download', (event: Electron.IpcMainInvokeEvent) => {\n    startDownload(\n      (error, progressInfo) => {\n        if (error) {\n          // feedback download error message\n          event.sender.send('update-error', { message: error.message, error })\n        } else {\n          // feedback update progress message\n          event.sender.send('download-progress', progressInfo)\n        }\n      },\n      () => {\n        // feedback update downloaded message\n        event.sender.send('update-downloaded')\n      }\n    )\n  })\n\n  // Install now\n  ipcMain.handle('quit-and-install', () => {\n    autoUpdater.quitAndInstall(false, true)\n  })\n}\n\nfunction startDownload(\n  callback: (error: Error | null, info: ProgressInfo | null) => void,\n  complete: (event: UpdateDownloadedEvent) => void,\n) {\n  autoUpdater.on('download-progress', (info: ProgressInfo) => callback(null, info))\n  autoUpdater.on('error', (error: Error) => callback(error, null))\n  autoUpdater.on('update-downloaded', complete)\n  autoUpdater.downloadUpdate()\n}\n","import { app, BrowserWindow, shell, ipcMain } from 'electron'\nimport { createRequire } from 'node:module'\nimport { fileURLToPath } from 'node:url'\nimport path from 'node:path'\nimport os from 'node:os'\nimport { update } from './update'\n\nconst require = createRequire(import.meta.url)\nconst __dirname = path.dirname(fileURLToPath(import.meta.url))\n\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main\n// │ │ └── index.js    > Electron-Main\n// │ └─┬ preload\n// │   └── index.mjs   > Preload-Scripts\n// ├─┬ dist\n// │ └── index.html    > Electron-Renderer\n//\nprocess.env.APP_ROOT = path.join(__dirname, '../..')\n\nexport const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron')\nexport const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist')\nexport const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL\n\nprocess.env.VITE_PUBLIC = VITE_DEV_SERVER_URL\n  ? path.join(process.env.APP_ROOT, 'public')\n  : RENDERER_DIST\n\n// Disable GPU Acceleration for Windows 7\nif (os.release().startsWith('6.1')) app.disableHardwareAcceleration()\n\n// Set application name for Windows 10+ notifications\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit()\n  process.exit(0)\n}\n\nlet win: BrowserWindow | null = null\nconst preload = path.join(__dirname, '../preload/index.mjs')\nconst indexHtml = path.join(RENDERER_DIST, 'index.html')\n\nasync function createWindow() {\n  win = new BrowserWindow({\n    title: 'Main window',\n    icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),\n    webPreferences: {\n      preload,\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\n      // nodeIntegration: true,\n\n      // Consider using contextBridge.exposeInMainWorld\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\n      // contextIsolation: false,\n    },\n  })\n\n  if (VITE_DEV_SERVER_URL) { // #298\n    win.loadURL(VITE_DEV_SERVER_URL)\n    // Open devTool if the app is not packaged\n    win.webContents.openDevTools()\n  } else {\n    win.loadFile(indexHtml)\n  }\n\n  // Test actively push message to the Electron-Renderer\n  win.webContents.on('did-finish-load', () => {\n    win?.webContents.send('main-process-message', new Date().toLocaleString())\n  })\n\n  // Make all links open with the browser, not with the application\n  win.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith('https:')) shell.openExternal(url)\n    return { action: 'deny' }\n  })\n\n  // Auto update\n  update(win)\n}\n\napp.whenReady().then(createWindow)\n\napp.on('window-all-closed', () => {\n  win = null\n  if (process.platform !== 'darwin') app.quit()\n})\n\napp.on('second-instance', () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore()\n    win.focus()\n  }\n})\n\napp.on('activate', () => {\n  const allWindows = BrowserWindow.getAllWindows()\n  if (allWindows.length) {\n    allWindows[0].focus()\n  } else {\n    createWindow()\n  }\n})\n\n// New window example arg: new windows url\nipcMain.handle('open-win', (_, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n      nodeIntegration: true,\n      contextIsolation: false,\n    },\n  })\n\n  if (VITE_DEV_SERVER_URL) {\n    childWindow.loadURL(`${VITE_DEV_SERVER_URL}#${arg}`)\n  } else {\n    childWindow.loadFile(indexHtml, { hash: arg })\n  }\n})\n"],"names":["win"],"mappings":"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"}